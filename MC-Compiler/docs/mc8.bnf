;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; T Y P E   D E S C R I P T I O N S
;
; Each BNF symbol begins with a "type" that identifies its purpose in a generic
; manner. The currently defined sets of symbol "types" are as follows:
;
;  "id": A generic, regex-style symbol identifier. These are used to match
;        arbitrary patterns (like all digits, all letters, etc).
;  "t": The name of a data type.
;  "s": The name of a singleton value (e.g. true and false).
;  "kw": The name of a keyword in the language (e.g. "if"). Keywords are generally
;        used to create functional blocks.
;  "bi": A built-in function name. These are a superset of keywords, but are all
;        usable as functions.
;  "p": A punctuator (e.g. mathematical operators, grouping symbols, etc).
;
; Using symbols in the groups defined above, more complex symbols and structures
; can be defined. These are grouped further as follows:
;
;  "var_def": A variable definition. Because some variables can take special
;             types (e.g. "bool" can be "true" or "false"), there are variable
;             definitions to capture these edge cases. There is also a master
;             variable definition symbol for *any* valid variable definition of
;             any type, name, and value.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; B A S I C   S Y M B O L   D E C L A R A T I O N S
; Identifiers
<id_ws> ::= (" " | "\t")*
<id_pos_digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<id_digit> ::= "0" | <id_pos_digit>
<id_letter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<id_integer> ::= <id_pos_digit> <id_digit>*
<id_name> ::= <id_letter> (<id_letter> | <id_digit> | "_")*
; Data types
<t_uint8> ::= "uint8"
<t_bool> ::= "bool"
; Singleton values
<s_true> ::= "true"
<s_false> ::= "false"
; Keywords
<kw_if> ::= "if"
<kw_elif> ::= "elif"
<kw_else> ::= "else"
<kw_for> ::= "for"
<kw_while> ::= "while"
; Builtins
<bi_exit> ::= "exit"
<bi_free> ::= "free"
; Punctuators
<p_add> ::= "+"
<p_sub> ::= "-"
<p_assign> ::= "="
<p_lor> ::= "||"
<p_land> ::= "&&"
<p_lnot> ::= "!"
<p_gt> ::= ">"
<p_lt> ::= "<"
<p_eq> ::= "=="
<p_ge> ::= ">="
<p_le> ::= "<="
<p_neq> ::= "!="
<p_lparen> ::= "("
<p_rparen> ::= ")"
<p_lcurly> ::= "{"
<p_rcurly> ::= "}"

; V A R I A B L E S
<var_def_uint8> ::= <t_uint8> <id_ws> <id_name> <id_ws> <p_assign> <id_ws> <id_integer> <id_ws> 
<var_def_bool> ::= <t_bool> <id_ws> <id_name> <id_ws> <p_assign> <id_ws> (<s_true> | <s_false>) <id_ws> 
<var_def> ::= <var_def_uint8> | <var_def_bool>

; C O N D I T I O N A L S

